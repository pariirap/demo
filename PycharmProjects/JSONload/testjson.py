import json
from datetime import datetime



with open('pari.json') as data_file:
    data = json.load(data_file)

"""
LINESTRING
{
    "trackuuid" : "e5578365-bd6b-48c3-b242-26cbcb9acaa3",
    "mission" : "e24b6ae91b4743c2be9ca527dabe61e5",
    "starttime" : "2013/08/04 14:55:43.000-0400",
    "endtime" : "2013/08/04 14:58:10.000-0400",
    "geometry" : "LINESTRING (-104.83352059935503 38.86420027712982, -104.83353984503054 38.864069620337496, -104.83356391795695 38.86393676287064, -104.83359173476035 38.86380235511433, -104.8336230712641 38.863666464186565, -104.83365636244689 38.86353155398585, -104.83368845287033 38.86339519117611, -104.8337201600582 38.8632584593136, -104.83375134154637 38.863121981146094, -104.83378262525699 38.86298349084052, -104.8338129615673 38.86284366936793, -104.83384731606868 38.86270380180687, -104.83388524419959 38.862563289800526, -104.83392773730627 38.86242533520326, -104.83396889986211 38.86228706804351, -104.83400896299517 38.862148043499815, -104.83404839703725 38.862009187358126, -104.83408417347286 38.86187065632143, -104.8341178991713 38.86173289851228, -104.83414939128924 38.86159507484626, -104.83417860355641 38.86145749915177, -104.83420362115997 38.86131890759159, -104.83422707656993 38.861178779092185, -104.83424955724344 38.861039093876656, -104.83427219480322 38.86090039382777, -104.83429280852219 38.860762715674724, -104.83431284271913 38.86062388061147, -104.83433111322344 38.86048375336239, -104.83434645013969 38.860341500851796, -104.8343599155503 38.8601995182321, -104.83437313898493 38.86005532426591, -104.83438431113454 38.85990785330312, -104.83439076386794 38.859758452154225, -104.8343919209455 38.85960880712406, -104.83438895776916 38.859457657035776, -104.83438527749101 38.85930670880702, -104.83437777421463 38.85915650244423, -104.8343673140343 38.85900415243354, -104.8343519727109 38.858850113532476, -104.83433382785091 38.8586956844509, -104.83431388482333 38.858540104964995, -104.83429093878411 38.858385011342016, -104.8342669858749 38.858229794822314, -104.83423929770653 38.85807629109811, -104.8342070221105 38.85792218944101, -104.83417047582194 38.85777210098479, -104.83412924918005 38.857622632966184, -104.83408258316582 38.85747438451434, -104.83403024447874 38.85732683859535, -104.83397857954924 38.85718221537803, -104.83392859174899 38.85703778881453, -104.83387512932106 38.856894660816685, -104.8338190252766 38.85675121102488, -104.83375778887442 38.85660982532342, -104.8336943315549 38.85646977299566, -104.83363228893877 38.85633073530099, -104.83357440772012 38.85619460967243, -104.83351560779931 38.85606224358689, -104.83345192638374 38.855932662978184, -104.83339049845601 38.85580361814563, -104.83333201019275 38.85567663475321, -104.83327227227178 38.85554840092235, -104.8332139168881 38.85541907760883, -104.83315648582833 38.855289369223215, -104.83309994937063 38.85515921704724, -104.83304467443027 38.85502685883502, -104.83298978719186 38.854892400454546, -104.83293654527188 38.85475486104384, -104.83288520936479 38.85461757871875, -104.83283717525633 38.854479654334995, -104.83279556869995 38.85434078294706, -104.83275744211528 38.854201716716645, -104.83272343289984 38.8540626040305, -104.83269458343214 38.85392238923863, -104.83266888144301 38.85378088504992, -104.83264606195272 38.8536374431503, -104.83262369665256 38.85349626812115, -104.83260179039253 38.853355288217244, -104.83258095845345 38.85321592528179, -104.83256072994705 38.85307684236211, -104.83254143641994 38.852935165510736, -104.83252241054817 38.85279579744496, -104.83250380981595 38.852658099052135, -104.8324874086067 38.85252118924138, -104.83247065191476 38.85238479260093, -104.83245282269486 38.85225003903118, -104.83243286668151 38.852114151170596, -104.83241278924737 38.851979990004075, -104.83239086030642 38.851844853104794, -104.83236831086968 38.851709893001825, -104.8323443942408 38.851575112216324, -104.83232166224768 38.85144209455894, -104.83230159605868 38.851310022377284, -104.83228199881717 38.85117831101446, -104.83226109397826 38.851047909216625, -104.83224045040753 38.85091870019309, -104.83222014970794 38.850792569319765, -104.83220249753566 38.85066687856505, -104.83218162791411 38.85054041460025, -104.83216065062139 38.85041456135287, -104.8321390260218 38.85028800299248, -104.83211423202532 38.850160435149654, -104.83208789424121 38.85003408851487, -104.83205725248338 38.84990587625448, -104.83202292406527 38.84977435945649, -104.8319863390882 38.84964113071472, -104.83194627136574 38.8495083399023, -104.83190539989008 38.8493753892717, -104.8318642464887 38.84924306771473, -104.83182448754056 38.84911191251607, -104.83178488878326 38.84898036472717, -104.83174615742449 38.84884821087141, -104.8317073611001 38.84871626279736, -104.83166946110025 38.84858388613966, -104.8316319156054 38.84845029470451, -104.83159453766949 38.848315553805726, -104.83155729664938 38.84818057401518, -104.83151738804277 38.84804440701124, -104.83147878404782 38.84790857181073, -104.83143895629641 38.84777298784, -104.83139897652434 38.847635860076146, -104.83135632545294 38.8474973446817, -104.83131291770817 38.847357598671415, -104.83126801344987 38.84721668076098, -104.83122166046269 38.847074011972204, -104.83117940609431 38.846931692935975, -104.8311383694317 38.84679006682886, -104.83109842786858 38.84664772574679, -104.83106235497044 38.84650686505789, -104.8310276166951 38.84636596099866, -104.83099378206677 38.846225178343694, -104.83096181221241 38.846084887900105, -104.83093300591716 38.84594563516275, -104.83090399993348 38.84580708218752, -104.83087678271129 38.84566922083929, -104.83084919279722 38.84553035109183, -104.83082412202505 38.84539241107869, -104.8307998608451 38.84525407085614, -104.83077282127556 38.84511526018207, -104.83074519012543 38.844976997299845, -104.83071697775854 38.84483894752425, -104.83068982099185 38.84469953157876, -104.83066414327978 38.84455801511483, -104.83063911351823 38.84441573012402, -104.83061618984141 38.84427240530955, -104.83059058785409 38.844129135129364, -104.8305636419416 38.84398549422028, -104.8305339375644 38.843842036724126, -104.83050621460167 38.84369795494777, -104.83048003808715 38.843553588974494, -104.83045546439732 38.8434090175784, -104.83043324191452 38.843265976197905, -104.83041282967359 38.84312380767772, -104.83039231613101 38.842980739712644, -104.83036749675847 38.842836109419025, -104.83033957516294 38.84269143426032, -104.8303119618454 38.84254544635626, -104.83028940371851 38.84239910492305, -104.83026866181243 38.842254259695565, -104.83025096822061 38.84210906737904, -104.83023502755795 38.841961992977986, -104.83022223523544 38.841813720449615, -104.8302106595124 38.84166563185817, -104.83020142041664 38.8415170116423, -104.83019445245783 38.84136857017811, -104.83019172084215 38.84121983111144, -104.83019206314601 38.84107002889655, -104.83019569712387 38.84092181328304, -104.83019954211774 38.84077415501069, -104.83020904063743 38.840626617834914, -104.83022219887066 38.84047785577778, -104.83023617128731 38.84033021862633, -104.83025078105511 38.840181877936885, -104.83026829838046 38.84003329769294, -104.83028386865708 38.83988447219326, -104.83029444416452 38.839734174613014, -104.83029964125244 38.839582227076335, -104.83029920997728 38.83942895902344, -104.83029958395548 38.839275434655185, -104.83030031798931 38.83912295697975, -104.83029807300986 38.83897035112922, -104.8302970562952 38.83881775682363, -104.83030002650275 38.83866531328877, -104.83030280252427 38.838511518419416, -104.83030659759609 38.83835846576846, -104.83031104689655 38.83820526599348, -104.8303159490907 38.83805279513677, -104.83032082553196 38.8378991671322, -104.8303247355183 38.837747868792626, -104.83033178898161 38.83759785132555, -104.83033793591513 38.83744725051982, -104.83034553066886 38.83729668961669, -104.83035559532891 38.837145804824765, -104.8303684389731 38.83699543819396, -104.8303874541938 38.836844820912376, -104.83041481373742 38.83669494802154, -104.83044491712437 38.8365445523757, -104.83047552702746 38.83639367339984, -104.83050875667315 38.83624502792067, -104.83054401922207 38.836099111899614, -104.83058329398597 38.8359549679301, -104.83062416512898 38.835814241379666, -104.8306676781348 38.835676503482205, -104.83071250294351 38.83554245951268, -104.83076011665955 38.835410792042765, -104.83081317480278 38.83528120185188, -104.83087087828905 38.83515325865938, -104.8309351751802 38.83502639201915, -104.83100178341807 38.83490078271715, -104.83107524124712 38.83477606607031, -104.83115547740803 38.83465263040529, -104.83124008644035 38.83453000588314, -104.83133169175079 38.83440793942883, -104.83142679498891 38.83428782553054, -104.83152561410917 38.83416782006358, -104.8316320623595 38.83404760144367, -104.83174279993757 38.833930394448046, -104.83185578582902 38.83381550235927, -104.83197440882806 38.83370245502581, -104.83209379680781 38.83359178863776, -104.83221479770852 38.83348283866942, -104.83233672608873 38.83337429023614, -104.8324591036935 38.83326637866336, -104.8325834992121 38.83315929268362, -104.83270822996568 38.833050581429006, -104.83283554329688 38.832942613638, -104.83296089004034 38.83283524948017, -104.83308476357789 38.832728034982274, -104.83320554604425 38.832620326509634, -104.83332310700301 38.832512781967424, -104.83343743357167 38.83240471600573, -104.8335450798902 38.832296420394364, -104.83364705182309 38.83218598718364, -104.83374285923466 38.83207310119984, -104.83383255198525 38.831956322061686, -104.83391545628403 38.83183674971231, -104.83399502730312 38.831712649690516, -104.83406731956627 38.83158594278954, -104.8341339812585 38.83145615082583, -104.83419406721595 38.83132421863148, -104.83424731387368 38.83119162442855, -104.83429387913009 38.83105935858289, -104.83433632983385 38.83092528619321, -104.83437432903355 38.83079175588348, -104.83441271239776 38.830656992901304, -104.83444837232085 38.830521452878315, -104.83448066957449 38.830386734202506, -104.83451335050763 38.83025182267391, -104.8345444803216 38.83011719717657, -104.83457503326358 38.82998176575957, -104.83460191010478 38.82984415571824, -104.8346295388483 38.82970780908267, -104.83465895636336 38.82957200338521, -104.83469023951886 38.829436188622246, -104.83472442409776 38.82929970248365, -104.83475856967992 38.82916290906609, -104.83479563846205 38.82902418395486, -104.83483213635837 38.82888371014782, -104.8348691322098 38.828744381691244, -104.83490788971014 38.82860366353877, -104.83494660892529 38.82846118956622, -104.83498539357295 38.82831713358333, -104.83502248564072 38.8281724887738, -104.83505726702357 38.82802352847579, -104.83509164275573 38.827867044862785, -104.83511672987464 38.827749093946395, -104.83514201551219 38.82762778756349, -104.83516567052757 38.82751190395346, -104.83519964436232 38.827356603537616, -104.83523448514195 38.82721090772106, -104.83526998232685 38.82706748639232, -104.83530568100683 38.82692470517419, -104.83534129581359 38.82678297227508, -104.83537854856597 38.826641741440895, -104.83541639246853 38.826500478236255, -104.83545240038836 38.82636131517903, -104.83548529795372 38.8262243722631, -104.83551557532573 38.82608900611465, -104.83554426417273 38.82595364164542, -104.83557320903434 38.82581776348678, -104.83560458464954 38.82568201863702, -104.83563589202296 38.82554489191642, -104.83566660482082 38.825407430743276, -104.83569929506008 38.82526735270432, -104.8357335820176 38.8251241427989, -104.8357680357374 38.82498032672378, -104.83580359908399 38.82483535456797, -104.83583977385604 38.82468971142522, -104.83587638674285 38.82454215220817, -104.83591188957257 38.82439563714376, -104.83594637236288 38.82424799155046, -104.83597926215167 38.82410146178733, -104.83600825107506 38.82395742378151, -104.83603339629134 38.82381413953167, -104.8360551367666 38.82367145954812, -104.83607434915045 38.82353010187859)",
    "tracknumber" : "14293651161561",
    "duration" : "147.0",
    "minspeed" : "0.0",
    "maxspeed" : "46.4066582",
    "avgspeed" : "31.879142830808764",
    "startlatitude" : "38.86420027712982",
    "startlongitude" : "-104.83352059935503",
    "endlatitude" : "38.82353010187859",
    "endlongitude" : "-104.83607434915045",
    "pointcount" : "296",
    "eventcount" : "0",
    "trackstatus" : "",
    "turncount" : "0",
    "uturncount" : "0",
    "stopcount" : "0",
    "stopduration" : "0.0",
    "avgstopduration" : "0.0",
    "classification" : "UNCLASSIFIED",
    "trackSprite" : "/geowave/stanag4676/image/e24b6ae91b4743c2be9ca527dabe61e5/e5578365-bd6b-48c3-b242-26cbcb9acaa3/2013-08-04T14:55:43.000.jpg"
  },{

POINT
"trackuuid" : "e3e15ed3-e462-424d-9035-e0fe839e985c",
    "geometry" : "POINT (-104.83138571132659 38.847628729318416)",
    "trackitemuuid" : "dc7f8028-b829-4157-8afe-f7578ed62c63",
    "framenumber" : "310",
    "pixelrow" : "16363",
    "pixelcolumn" : "12279",
    "mission" : "e24b6ae91b4743c2be9ca527dabe61e5",
    "tracknumber" : "5497558139243",
    "course" : "166.265884",
    "classification" : "UNCLASSIFIED",
    "latitude" : "38.847628729318416",
    "longitude" : "-104.83138571132659",
    "elevation" : "0.0",
    "speed" : "31.1093674",
    "spriteUrl" : "http://10.1.52.202:8282/geowave/stanag4676/image/e24b6ae91b4743c2be9ca527dabe61e5/e3e15ed3-e462-424d-9035-e0fe839e985c/2013-08-04T14:56:41.000.jpg",
    "timestamp" : "2013/08/04 14:56:41.000-0400"
"""
myjsonlist=[]

for item in data:
    myjsonobj={}
    myjsonobj['trackuuid'] = item['trackuuid']
    if 'geometry' in item:
        #db.sig.insert( {UID:2121, model:"airplane", loc: { type : "LineString", coordinates: [ [10,10] , [20,20], [6,6]]}})
        #create a dictionary of key location -> { type: "linestring", coordinates: list of lists
        if item['geometry'][:10] == 'LINESTRING':
            #myjsonobj['geometry'] = item['geometry']
            listoflist=[[]]
            # processing the first element that that '(' character prefixing LAT.
            str= item['geometry'].split(',')
            temp2=str[0].split()
            temp3=temp2[1].split('(')
            mylist=[]
            mylist.append(float(temp3[1]))
            mylist.append(float(temp2[2]))
            listoflist.append(mylist)

            for s in str[1:len(str)-2]:  # processing from second element (str[1]) to last but one str[len(str)-2].
                temp=s.split()
                mylist=[]
                mylist.append(float(temp[0]))
                mylist.append(float(temp[1]))
                listoflist.append(mylist)

            # now processing the last element that has ')' in LONG field
            temp=str[len(str)-1]
            temp2=temp.split()
            temp3=temp2[1].split(')')
            mylist=[]
            mylist.append(float(temp2[0]))
            mylist.append(float(temp3[0]))

            listoflist.append(mylist)

            listoflist.pop(0)
            mydict={}
            mydict['type']='LineString'
            mydict['coordinates']=listoflist
            myjsonobj['loc']=mydict




        if item['geometry'][:5] == 'POINT':
            str=item['geometry'].split()
            temp=str[1].split('(')
            mylist=[]
            mylist.append(float(temp[1]))
            temp2=str[2].split(')')
            mylist.append(float(temp2[0]))
            myjsonobj['loc']=mylist



    if 'duration' in item:
        myjsonobj['duration'] = float(item['duration'])
    if 'minspeed' in item:
        myjsonobj['minspeed']    = float(item['minspeed'])
    if 'maxspeed' in item:
        myjsonobj['maxspeed']    = float(item['maxspeed'])
    if 'avgspeed' in item:
        myjsonobj['avgspeed']    = float(item['avgspeed'])
    if 'framenumber' in item:
        myjsonobj['framenumber'] = int(item['framenumber'])
    if 'pixelrow' in item:
        myjsonobj['pixelrow']    = int(item['pixelrow'])
    if 'pixelcolumn' in item:
        myjsonobj['pixelcolumn'] = int(item['pixelcolumn'])
    if 'mission' in item:
        myjsonobj['mission']         = item['mission']
    if 'tracknumber' in item:
        myjsonobj['tracknumber'] = int(item['tracknumber'])
    if 'course' in item:
        myjsonobj['course']      = float(item['course'])
    if 'classification' in item:
        myjsonobj['classification']  = item['classification']
    if 'startlatitude' in item:
        myjsonobj['startlatitude']    = float(item['startlatitude'])
    if 'startlongitude'in item:
        myjsonobj['startlongitude'] = float(item['startlongitude'])
    if 'endlatitude' in item:
        myjsonobj['endlatitude']    = float(item['endlatitude'])
    if 'endlongitude'in item:
        myjsonobj['endlongitude'] = float(item['endlongitude'])


    if 'latitude' in item:
        myjsonobj['latitude']    = float(item['latitude'])
    if 'longitude'in item:
        myjsonobj['longitude'] = float(item['longitude'])
    if 'elevation' in item:
        myjsonobj['elevation']     = float(item['elevation'])
    if 'speed' in item:
        myjsonobj['speed'] = float(item['speed'])
    if 'spriteUrl' in item:
        myjsonobj['spriteUrl']      = item['spriteUrl']
    if 'starttime' in item:
        t1 = datetime.strptime(item['starttime'][:-5],'%Y/%m/%d %H:%M:%S.%f')

        myjsonobj['starttime'] = t1.strftime('%Y/%m/%d %H:%M:%S.%f')

    if 'endtime' in item:
        t1 = datetime.strptime(item['endtime'][:-5],'%Y/%m/%d %H:%M:%S.%f')

        myjsonobj['endtime'] = t1.strftime('%Y/%m/%d %H:%M:%S.%f')

    if 'motionevent'in item:
        myjsonobj['motionevent'] = item['motionevent']

    myjsonlist.append(myjsonobj)

with open('parijson5.json', 'w') as outfile:
    json.dump(myjsonlist, outfile)
